class Product:
    def __init__(self, name, price, availability=True):
        self.name = name
        self.price = price
        self.availability = availability

    def __str__(self):
        return f"{self.name} - {self.price} грн ({'В наявності' if self.availability else 'Немає в наявності'})"


class Cart:
    def __init__(self):
        self.items = []

    def add_product(self, product, quantity=1):
        if product.availability:
            self.items.append((product, quantity))
            print(f"{quantity} x {product.name} додано до кошика.")
        else:
            print(f"{product.name} зараз немає в наявності.")

    def remove_product(self, product):
        self.items = [item for item in self.items if item[0] != product]
        print(f"{product.name} видалено з кошика.")

    def total_price(self):
        total = sum(product.price * quantity for product, quantity in self.items)
        return total

    def show_cart(self):
        if not self.items:
            print("Кошик порожній.")
            return
        print("Ваш кошик:")
        for product, quantity in self.items:
            print(f"{quantity} x {product.name} - {product.price * quantity} грн")
        print(f"Загальна вартість: {self.total_price()} грн")



product1 = Product("Ігрова приставка", 13000)
product2 = Product("Комьютер", 37000, availability=False)
product3 = Product("Компьютерна миш", 1200)

cart = Cart()
cart.add_product(product1, 1)
cart.add_product(product2, 2)
cart.add_product(product3, 1)
cart.show_cart()
cart.remove_product(product2)
cart.show_cart()


class BankAccount:
    def __init__(self, owner, account_number, balance=0):
        self.owner = owner
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Поповнено: {amount} грн. Баланс: {self.balance} грн")
        else:
            print("Сума поповнення повинна бути більше 0.")

    def withdraw(self, amount):
        if 0 < amount <= self.balance:
            self.balance -= amount
            print(f"Знято: {amount} грн. Баланс: {self.balance} грн")
        else:
            print("Недостатньо коштів або некоректна сума.")

    def __str__(self):
        return f"Рахунок: {self.account_number}, Власник: {self.owner}, Баланс: {self.balance} грн"


class Bank:
    def __init__(self):
        self.accounts = []

    def create_account(self, owner, account_number, balance=0):
        account = BankAccount(owner, account_number, balance)
        self.accounts.append(account)
        print(f"Створено рахунок для {owner}. Номер: {account_number}")
        return account

    def transfer(self, from_account, to_account, amount):
        if from_account in self.accounts and to_account in self.accounts:
            if from_account.balance >= amount:
                from_account.withdraw(amount)
                to_account.deposit(amount)
                print(f"Переказ {amount} грн від {from_account.owner} до {to_account.owner} завершено.")
            else:
                print("Недостатньо коштів для переказу.")
        else:
            print("Один із рахунків не знайдено.")

    def show_accounts(self):
        for account in self.accounts:
            print(account)
bank = Bank()

account1 = bank.create_account("Володимир", "+380(1)96054646", 10000)
account2 = bank.create_account("Анатолій", "+380(3)5769345724", 5000)

account1.deposit(2000)
account2.withdraw(1000)
bank.transfer(account1, account2, 3000)
bank.show_accounts()
